６章３節
初期のルーティングは
get 'static_pages/home'

と言ったようになっており、ルーティングの参照の挙動としては
まず一番最初にコントローラーを探す
コントローラーのアクションhomeがあった場合、そのアクションの中身を参照する。

def home
end
の中身が何も書いていなかったら
  アクション名と同じコントローラー/アクション.html.erbを参照する。
  この場合。static_pages/home(.html.erb)が参照される


6章４節
手動でページの追加手順


６章５節
レイアウトファイルとDRY
yieldが該当箇所に置き換えられて自動的に読み込まれるようになっている。
ヘッダーに使用されている
<%=yield(:title)%>
の(:title)の部分は、provideに対応しており、これは各ビューのprovideの引数を受け取っている。いわゆるparamsと似たような構造と考えても良い。例えばhomeであれば
<%=provide(:title, 'Home')%>
と言ったようになる

６章5節番外：
Railsに必要なRubyの知識を学ぶ＆ヘルパー

ヘルパーは、app/helpersの中にあり、この中にヘルパーを定義することができる。

ヘルパーは、いわゆるメソッド的な役割と同じで、html cssに関しても、同じ処理を繰り返すものであれば、基本的にヘルパーにまとめておくことで、便利に再利用をすることができる。

また、ヘルパーに直接htmlを指定することができ、spanやdiv、h1などを生成する最便利なものではcontent_tagなどが存在する
def hogehoge
  content_tag(:span, 'hogehogehogera', style:'color:red;')
end
のように、
content_tag(要素名,'文字列', スタイルやクラスなど)
とすることが可能で、指定する際は
<%=hogehoge%>
などとする
























end
