６章３節
初期のルーティングは
get 'static_pages/home'

と言ったようになっており、ルーティングの参照の挙動としては
まず一番最初にコントローラーを探す
コントローラーのアクションhomeがあった場合、そのアクションの中身を参照する。

def home
end
の中身が何も書いていなかったら
  アクション名と同じコントローラー/アクション.html.erbを参照する。
  この場合。static_pages/home(.html.erb)が参照される


6章４節
手動でページの追加手順


６章５節
レイアウトファイルとDRY
yieldが該当箇所に置き換えられて自動的に読み込まれるようになっている。
ヘッダーに使用されている
<%=yield(:title)%>
の(:title)の部分は、provideに対応しており、これは各ビューのprovideの引数を受け取っている。いわゆるparamsと似たような構造と考えても良い。例えばhomeであれば
<%=provide(:title, 'home')%>
と言ったようになる

６章5節番外：
Railsに必要なRubyの知識を学ぶ＆ヘルパー

ヘルパーは、app/helpersの中にあり、この中にヘルパーを定義することができる。

ヘルパーは、いわゆるメソッド的な役割と同じで、html cssに関しても、同じ処理を繰り返すものであれば、基本的にヘルパーにまとめておくことで、再利用をすることができる。

また、ヘルパーに直接htmlを指定することができ、spanやdiv、h1などを生成する最便利なものではcontent_tagなどが存在する
def hogehoge
  content_tag(:span, 'hogehogehogera', style:'color:red;')
end
のように、
content_tag(要素名,'文字列', スタイルやクラスなど)
とすることが可能で、指定する際は
<%=hogehoge%>
などとする

7章１節：
レイアウトを作成する

<!-- [if lt IE 9] -->
<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<!-- ![endif] -->
これは条件付きコメントというもので、IEのみサポートされている特殊な書き方になっている。

今回はbootstrapを適応させて、簡単に見た目をスタイリングすることとした。
ヘッダーにはnavbar navba-fixed-top navbar-inverseなどを使い、ナビケーションバーにしつつ、コンテンツは中央揃えにしながらも上よりにしてある。
もちろん中はcontainerで囲ってあげて、その後にリンクを仕込ませる。危うやなのでメモすると

link_to "文字", 'リンク先', id: "logo"
と言った感じで指定でき、idの部分はclassにすることも可能。
なお、rubyにおいて引数の（）は省略することができ、更にjsと似たような感じで書くと
.link_to("文字","リンク先",{id:"logo"})
と言ったような感じになる

画像の引数の指定は少々複雑で、
<%=link_to image_tag("rails.png", alt: "Rails"), 'http://rubyonrails.org'%>
と言ったような指定をすることができこの場合は

link_to "文字や（画像,alt）の指定ができる", "飛び先", id classなど

と言ったしていの順番になる。画像が指定できる理由は、返還後
<a href="#"><img src="" alt=""></a>
のようになるためである。

bootstrapを安全に運用していくためには、バージョン指定は必須。指定の間違いの内容に確認をしっかりすること。今回は
gem 'bootstrap-sass', '3.3.1'
を導入した。またbootstrapと関連性の強いsprocketsも導入した。

７章２節
独自CSSの追加
特筆事項なし
あるとしたら、bootstrapを使用している場合、初期スタイリングと被らないように気をつけながらスタイリングする必要がある。

また、ページ全体に適応するのであれば、別途custom.css.scssなどとして、application全体のcssとbootstrap専用のcssとを区別してあげる必要がある。




７章３節：パーシャル・Sassで記述の簡素化
パーシャルを利用する際は、
render 'controller/view'
としてあげる必要があり、パーシャルで作成する際には
_view.html.erb
としてあげる必要がある。

アセットパイプライン
  アセットディレクトリについて

  アセットディレクトリ・マニフェストファイル・プリプロセッサエンジンというものがある。

  アセットディレクトリ
    railsバージョン4以上ではリソース（アセット：画像・CSS・JS等）の管理用に３種類のディレクトリが用意されている。

    app/assets:一番一般的に使う現在のアプリケーション用のアセット
    lib/assets：開発チームによって作成されたライブラリ用のアセット
    vendor/assets：サードパーティー製のアセット

    これらにはそれぞれサブディレクトリがある。

  マニフェストファイル
    sprocketsというgemを使って、ブラウザにアセットをひとつにまとめて送る機能がある。

    無駄な通信のやり取りを防ぐための技術

    コメントで記述されている
    *= require_self
    *= require_tree .
    などがこれで、treeはマニフェストファイルがあるディリ区鳥以下のものすべてを読み込んでくださいという記述。
    selfは自身のcssファイルを読み込んでくださいという記述である。

  プリプロセッサエンジン

  いわゆるerb sass coffeeなどのコンパイラである。
  また、プリプロセッサ電人はつなげて使用することができ、
  foobar.js.erb.coffeeなどとすることもできる。

７章４節：リンクとルート

結論。
<a href="static_pages/about">About</a>
よりも
<%=link_to "About", about_path%> (文字列,　名前付きルート)
のほうがいい。

ルーティングについて

get以外にmatchという指定の仕方もあり、こちらのほうが名前付きパスで指定する最スマートになる
なお、viaは現在必須となっている。基本的な書き方は

match 'top', to: 'home#top', via: 'get'

とし、viaに関してはgetかpostかを指定することが可能。

そして、これを変えたことにより、リンクを変くする必要がある。
基本的には名前付きパスで指定するものとする。

例えばルート（/）に指定するのであれば
root_path
になるし、先程の例のtopにアクセスするのであれば
top_path
となる。

７章５節：Modelの使い方

deviseを利用したmodelの実装

データベースを実験的に反映する場合は--sandboxモードを使用する。このため

rails c --sandbox
となる。

こうすることで直接的な変更はなくなるため、安全に様々な研究、実験をすることが可能となる。

7章６節：deviseの導入

deviseをインストールした際は、必ず
config/enviroments/developmentに、
<%
config.action_mailer.default_url_options = {host: 'localhost', port :3000}
%>

を入れる。

deviseではフラッシュメッセージが必要になるが、今回の場合、bootstrapに装飾した形で返したいため、予めヘルパーを定義しておいた。

例えば、もしflash[:success]='welcome to the sample app!'ってなった場合、このkeyの部分をbootstrap_class_forの引数に取ることで、それぞれ対応する結果をヘルパーが返してくれるようになるため。結果としてスマートにスタイリングとテキストを嵌めこむことが可能になる。

基本的なセットアップが終わったら、

  rails g devise:views
を走らせる。こうすることで必要なものがひと通り全て揃う。
その後、フラッシュメッセージは必ず表示させなければならない。という指示に基づき、設定を行っていく。

今回は、flashの指定をヘルパーで行い、クラスをbootstrapのものに変換できるようにした。こうすることで用意にスタイリングすることが可能となる。




7章7節：Userモデルの作成

次はdevise専用のデータベース（モデル）を作っていく。作り方は、
  rails g devise user
と言ったようになる。

実際に作られたマイグレーションファイルを見てみると、初期ではemailとパスワードなどが作られている。が、nameがないため、これは手動で追加する必要がある。
そのままマイグレーションファイルに記述してもいいし、またadd_columnから別に追加するやり方もある。

rails g migrationでの便利な書き方として
  hoge_users name:string
などとすると、自動的にusersの指定が入り、nameをadd_columnすることができる。（これは便利…）

validates (検証)について
基本的な指定の仕方
validates :colum, option

例えば、nameにから文字でないこと(presence)を検証するには
validates :name, presence: true
となる。

実際にrails c --sandboxでやってみると、saveの時にfalseを介してくることがわかる。

length: {maximum: 50}
という部分に関しては、分解してみてみると、多重配列になっていることがわかる
{length: {maximum: 50}}
つまり

<%
validates :name, presence: true, length: {maximum: 50}
%>
この一行をわかりやすく表現すると
<%
validates(:name, {presence:true},{length: {maximum: 50}})
%>
となる。

しっかりとバリデーションを設定することで、事故の防止に繋がる。

なお、deviseの設定自体は、config/initializers/devise.rbからいつでも参照することが可能。
このファイルの中に記述されている設定を変更することで、実際のdevise設定の反映も可能。

例えば、password_lengthの長さを変えたければ、その値を変更すればいいし、予め多くの設定がコメントアウトにて準備されている。このコメントアウトを外して設定を自由にカスタマイズすることも可能である。

７章８節：ユーザーを表示する

プログラミングのミスを発見しやすくするために、データベースから取得した情報をページに表示する仕掛けを作成した。
こうすることで、現在どのページの繊維にいて、結果としてtrue/falseのどっちなのか？というチェックも容易にできるため、作業の効率化に繋がる。

また、一般ユーザーには見られたくないので、デバッグを表示する際の条件分岐に
  if Rails.env.development?
という記述を追加するだけで、本番環境で表示されないようにすることが可能。

resourcesなusersが生成されていないので、コントローラーを生成し、resourcesを設定する。

HTTPリクエスト	URL	アクション	名前付きルート	用途
GET	/users	index	users_path	ユーザー一覧ページ
GET	/users/1	show	user_path(user)	該当ユーザー表示ページ
GET	/users/new	new	new_user_path	サインアップページ
POST	/users	create	users_path	ユーザー登録用アクション
GET	/users/1/edit	edit	edit_user_path(user)	該当idのユーザー情報編集ページ
PATCH	/users/1	update	user_path(user)	ユーザー情報更新アクション
DELETE	/users/1	destroy	user_path(user)	ユーザー削除アクション

そのままだとnewも反映されてしまうので、only:を使って限定的に指定する。

今回はgravaterというサービスを使用してプロフィールの写真として使っていく。

gravaterはプロフィール写真を共通管理するためのサービス。
ファイルのアップロードなどを考えずに済むので便利

gravatar_forヘルパーを作成し、登録しているプロフィール写真を呼び出せるように設定。

また、GravatarのWEBサイトを参照してDigestのライブラリ内にあるのhexdigestというメソッドを使用させてもらいましょう。
これはMD5ハッシュを作成するための方法を提供してくれるもので、これでメールアドレスからURLを生成して使用します。
>> email = "MHARTL@example.COM".
>> Digest::MD5::hexdigest(email.downcase)
=> "1fda4469bcbec3badf5418269ffc5968"
注意点としては通常メールアドレスは大文字と小文字を区別しないものの、MD5ハッシュでは区別されてしまう点です。

７章９節：deviseを利用したユーザー登録

deviseを利用するにあたって、基本的にビューの編集をする際は、app/views/devise直下のフォルダーを利用する。new editが入っているフォルダーはdevise/registrationsである。

7章１０節：サインインとサインアウト

current_userというメソッドでユーザーを取得することができる。

サインインしている時としていない時で条件分岐をして、表示を変更する必要がある。

headerのパーシャルに変更を加えることでこれは実現することが可能。

サインインしているかしていないかでパスを変更する。

bootstrapのjs部分についてだが、読み込みの順番がどうやらあるらしい、配置する順番に関しては気をつけること。先にjquery系を行い、次にbootstrap.そのあとにターボリンクなどを配置すると良い。

7章11節：ユーザー情報の変更

ユーザー編集ページ。

ユーザーの更新をする際は、views/registrations/editの編集を行う。

また、パスの指定は、edit_user_path(current_user)という風に設定を追加するだけで可能（なぜcurrent_userで可能かは後ほど調べることにします。）

また、registrations_controllerでは、account_update_paramsをオーバーライドして設定を追加してあげる。今回の場合は、nameもpermitに追加した形で渡している…はずです。

すでに当人のみが編集でき、validatesも最初に地点で設定が完了しているため、編集工程はこれにて終了となる。

7章12節：ユーザー情報の一覧表示

今回は、ユーザー情報を一覧表示するindexアクションの追加を行った。

アクションにユーザーインデックスを追加し、users.allを行った。
このusersは、User.allから呼び出しているので、usersでなければならないことに注意をすること。

また、gravaterのヘルパーにデフォルト以外のサイズを指定するオプションを渡しているため、パラメーターを取得できるようにヘルパーを書き換えることで解決。

また、indexが完成したため、_headerにusers_pathを追加した。
このパスを利用するためにresoucesのパスに許可を与える必要がある。

なお、users_pathを指定した場合、基本的にはindexが呼び出される（今回指定しているresourcesはusersであるため）

7章13節：サンプルユーザーの追加

前のページまでは、ユーザーは一人だけだったが、本当は多くのユーザーが利用するはず。
それを想定して、ダミーユーザーの追加を行う。

今回は便利なgem (faker)というものを利用していく。
このgemを利用することで、手軽に大量のダミーデータを生成することができ、様々な実験を行うことが可能になる。

基本的には、namespace :db doに続いて、descにテキストを、taskに処理を実際に書いていく。
なお、rubyの公文をそのまま使用することができ。Fakerモジュールから様々なクラスを利用することが可能となる。
モジュールを利用する際は
Module::Class.method
と言ったような形が基本になることを思い出しておく。

なお、ユーザーが多くなると容易に重くなることが想定できる。そのため、ページネーションの実装を行う。
今回は、will_paginateというgemと、bootstrap-will_paginateというgemを使用する（bootstrapつよ？！）

使用方法はものすごく簡単で。例えば

<ul class="users">
  <%@users.each do|user|%>
  <li>
    <%=gravater_for user,size:52%>
    <%=link_to user.name, user%>
  </li>
  <%end%>
</ul>

普通にこれを実行して、万が一大量にデータがあったらすぐにクラッシュしてしまうことを想定することができるが、pagenateの場合は、挟んであげるだけで自動的に連番形式で、表示上限を30までにしてくれる。ものすごく優秀である。

ちなみに、paginateのコントローラー側の設定は、単純にallをpaginageに置き換えるだけで、値は(page: params[:page])となり、これはpaginageによって自動生成されたものであるためである。

なお、引数指定の時はpag(e)だが、pag(i)nateと混合しないように注意。フルで書く場合はiになると覚えておこう。

また、もう少しスマートにできそうなので、パーシャルの改良も行っていく。

なお、今回はliの部分のみを引数に渡したが、renderで指定する際はrender @usersだけでいい。これには一体何が起こっているのだろうか。

@usersを回した場合、自動的にeachして回してあげなさいとなる。
これは、will_paginateがよしなにやってくれているために、結果として特殊記法が使えるようになっているのであり、決してrailsの標準仕様でないことを頭に入れておく必要がある。
重ねて、will_paginateを利用する場合には、コントローラーの設定の方でpaginate(page: params[:page])としておくことを覚えてこう。

7章１４節：ユーザー情報の削除


destroyを実装するにあたって、ユーザーモデルにadmin属性を追加。booleanカラムを追加してあげる。
こうすることで、管理者のみでリュートの実行をすることが可能になる。

７章１５節：マイクロポストのモデルを作る。

ユーザー、マイクロポストの関連性について。
片方に対してはbelongs_toを使い、他方に対してはhas_manyを使う。

一対一、一対多。多対多野３つに憑って基本的には別れる。
また、belongs_to has_manyで関連付けたことにおって使えるメソッドは

micropost.user
user.microposts
user.microposts.create(arg) ...
と言ったようになる。
なお
Micropost.creaは
user.microposts.createになることに注意

また、デフォルトのスコープをラムダで指定することも可能。

今回も例のごとくmicropostsで指定してあげている。

なお、表示結果を確認するために、ダミーのマイクロポストのデータをtasksに作成した。
User.limit(6)をしていして行う。こうすることで無駄に多く作られないようにしている。

７章１６節：マイクロポストの投稿フォーム

特筆事項なし。新たにルーティングを追加し、パーシャルとform_forを使用して処理を行った。

7章１７節：フィードを表示する

今回のミスは、何故かレイアウトが崩れてしまったこと。
原因はわからないが、cssの問題であろうと思い、とりあえずfloat:leftにしておくことで解決した。
この解決方法は果たしてあっているのかは疑問である。

７章１８節：リレーションシプモデルを作成する

複数対複数のデータベースのモデルを関連付けるときに必要なのがhas_many:throughとなる。
これらの関連付けを実現するために、[:follower_id, followed_id]をユニークで関連付けた。

７章１９節：リレーションシップとユーザーを関連付ける
はじめに、それぞれ作ったデータベースの関連付けを行っていく。

基本的にはhas_many belongs_toの関係と同じで、指定の仕方が若干違うことに注意。

また、railsの仕様により、自動的に推測されてしまう場所もあることにも注意しなければならない。
よって、記述する際はクラス名を指定してあげなければならない。

また、has_many :followeds, through: :relationshipsとしてあげることで、デフォルトの外部キーを探す。

７章20節＆２１節：ユーザーのフォロー/アンフォロー1

フォローしているユーザー用のウェブインターフェース


throughについて

基本的には、AのテーブルとBのテーブルをjoinした時に、一つだけでは収まらない時に使用する。

例えば、XテーブルとYテーブルが合った時に、Xの1=a,2=b,3=bという形だけだったらひとつだけで済むが、1=a&& b,2=a,3=bとなった時に、参照先が一つでは収まらなくなる時、つまり、いずれもhas_manyになる時に橋渡しとして使用する。

今回のsample_appのケースでは、Userを参照する先がUserということで、自分自身のテーブルを参照していることになるが、更に今回の場合は変則的で、それのfollower followedをそれぞれ参照していることになる。

・コントローラーのエラー
今回のコントローラーが読み込めない件についてのエラーは、ロードできないということで、そもそもcontrollerがロードできない→コントローラー名そもそもに間違いがあるのではないか？というところを疑い、見直すこととした。
ファイル名はmicroposts_controller.rbとなっていたため、大文字に直すとMicropostsControllerとなる。つまり、ここでクラス名をMicropostControllerにしてしまったことが今回のミスの原因となっている。（チャット投稿フォーム）

7章２２節：フォロー、アンフォローの実装２

今回は、フォロー/アンフォローの実装を行った。

コントローラーに新たにfollowing followersを作成し、それぞれタイトル設定、データ取得及びページネーションを行うための処理の実装。
アクション内でrenderで呼び出しているのもポイント

viewは１アクションに１つと決まっているわけではなく、同様の見た目で実装する場合に限りますが、複数アクションで使用しても良いのです。
ただし、当たり前ですがviewの中で使われるインスタンス変数はそれぞれのアクションで設定する必要があります。

フォローとアンフォローの実装は実は簡単で、ここでuser.rbに実装した便利なメソッドが役に立つ。
follow!やunfollow!などを使用して行くだけ。新たにrelationshipc_controllerを作成しそれぞれクリエイト、デストロイを実装した。
これでフォロー、アンフォロー機能が感性。

最終章：ステータスフィールドの実装！ついにアプリ完成！
観覧する投稿されたマイクロポストの表示をホームにて行うための処理を実装していきます。

この実装に関しては、sqlの知識も必要になってくるため。少々複雑になってくる。
まずはユーザーモデルでフィードの実装を行い、マイクロポストモデルにて検索処理を実装していく。






-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------















<%11/28 do%>
応用課題1：メモ
画像アップロードを調査しよう。
gem "carrerwave"
rails g uploader Image
<%end


  11/29 do%>
その後、今回の場合コメントを投稿する際にmicropostを使用するので、データベース、モデル、コントローラーに変更を加えておく
モデルを開き、アップローダーへのマウントをする記述の追加。
以降、受け取り処理の実装
<%CLEAR%>
<!-- 追加箇所 開始 -->
 <div class="field">
   <% if @product.image? %>
     <div class="thumbnail">
       <%= image_tag @product.image.url %>
     </div>
   <% end %><br>
   <%= f.label :image %><br>
   <%= f.file_field :image %>
   <%= f.hidden_field :image_cache %>
 </div>
 <div class="field">
   <!-- 既存レコード(DBに保存されている)かつ、画像が存在する場合 -->
   <% if @product.persisted? && @product.image? %>
     <label>
       <%= f.check_box :remove_image %>
       画像を削除
     </label>
   <% end %>
 </div>
 <!-- 追加箇所 終了 -->
 例えば、上記みたいなものがあったとしたら、permitに付け加えるのは以下のようになる

 以降、プライベートコントローラー実装
 <%
 def product_params
   params.require(:product).permit(:name, :price, :image, :image_cache, :remove_image)
 end
 "#{i.user_id} #{i.content} #{i.image}"
 %>
 imageとimage_cache remove_imageが加わった。

 以降、表示処理の実装
 <!-- 追加箇所 開始 -->
<p>
  <strong>Image:</strong>
  <% if @product.image? %>
    <div class="thumbnail">
      <%= image_tag @product.image.url %>
    </div>
  <% end %>
</p>
<!-- 追加箇所 終了 -->
<%end%>







応用課題２：お問い合わせフォームの実装

要件定義↓

rails g controller contact(resources: new create)
new=get
create=post
rails g model Contact name:string email:string content:string

以下を追加
<%
def create
  @contact=Contact.create!(contact_params)
  # メールを送信する処理
  redirect_to '/'
end
  private

    def contact_params
      params.require(:contact).permit(:name,:email,:content)
    end
%>
modelのvalidatesはname email contentともにからではないかの検証
送信し終わるとフラッシュメッセージの表示

メール送信処理は、gem "letter_opener"を使用して別タブで開くようにする。メーラー自体は手動で生成する。
debelopmentまたはinitialize配下にメール送信設定を記述後、
rails g mailer Mailer method
と言った感じで生成する。app/mailers配下にメーラーファイルが生成されるので、設定を記述していく。

mailメソッドを使用する。
今回の場合は

以上



























































































































































































































































































































































































































end
